Lesson 4
Concurrency

* Goroutines

* Start goroutines
.play goroutines.go

* Start goroutines
.play goroutines_print_in_main.go

* Goroutines
.play goroutines_sleep_in_main.go

* Goroutines
.play goroutines_multi_in_main.go

* Goroutines runtime.GOMAXPROCS
.play goroutines_multi_maxproc.go

* Goroutines sync.WaitGroup
.play goroutines_multi_waitgroup.go

* Goroutines sync.WaitGroup
.play goroutines_multi_waitgroup_forloop.go

* Goroutines sync.WaitGroup
.play goroutines_multi_waitgroup_more.go

* Goroutines sync.WaitGroup
.play goroutines_multi_waitgroup_less.go

* Goroutines Data Race
.play goroutines_multi_data_race.go

* Goroutines Data Race
.image data_race.png 550 1000

* Goroutines Mutex
.play goroutines_multi_mutex.go

* Goroutines Data Race
.image mutex.png 550 1000

* Goroutines Race Detector

	$ go test -race mypkg    // to test the package
	$ go run -race mysrc.go  // to run the source file
	$ go build -race mycmd   // to build the command
	$ go install -race mypkg // to install the package

* Channels

* Channels
	ch := make(chan int)

	ch <- v    // Send v to channel ch.
	v := <-ch  // Receive from ch, and

* Channels
.play goroutines_channels.go

* Unbuffered Channels

	ch := make(chan int)
	ch := make(chan int, 0)

* Buffered Channels

	ch := make(chan int, 10)

* Channels close

	ch := make(chan int, 10)
	close(ch)

* Channels close
.play goroutines_channels_close.go

* Channels close
.play goroutines_channels_close_ping.go

* Channels: Guarantee Of Delivery
.image guaranteeOfDelivery.png 300 1000

* Channels: State
.image ChannelsState.png 300 1000

* Channels: Waiting For
.play goroutines_channels_waiting_for.go

* Channels: Waiting For Result
.play goroutines_channels_waiting_for_result.go

* Channels: Select
.play -numbers -edit goroutines_channels_select.go /START OMIT/,/END OMIT/


